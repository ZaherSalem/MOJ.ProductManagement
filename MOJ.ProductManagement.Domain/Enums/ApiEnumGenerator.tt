<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>

<# // Main template logic - must come before any class feature blocks #>
<#
    // Configuration - Update these values for your environment
    string appSettingsPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "appsettings.json");
    string lookupTableName = "Lookups";
    string enumNamespace = "MOJ.ProductManagement.WebApi.Enums";
    string className = "LookupEnums";
    string connectionString = "Server=localhost;Database=ProductsManagment;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True;";

    // Process data and generate output
    var generatedCode = GenerateEnums(connectionString, lookupTableName, enumNamespace, className);
    Write(generatedCode);
#>

<#+ // Start of class feature blocks (must come after all regular template code)
public string GenerateEnums(string connectionString, string lookupTableName, string enumNamespace, string className)
{
    try
    {
        var lookupItems = GetLookupItems(connectionString, lookupTableName);
        var rootItems = lookupItems.Where(x => x.ParentId == null).ToList();

        var code = new System.Text.StringBuilder();
        code.AppendLine("//------------------------------------------------------------------------------");
        code.AppendLine("// <auto-generated>");
        code.AppendLine("//     This code was generated by a tool.");
        code.AppendLine("//");
        code.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
        code.AppendLine("//     the code is regenerated.");
        code.AppendLine("// </auto-generated>");
        code.AppendLine("//------------------------------------------------------------------------------");
        code.AppendLine();
        code.AppendLine("using System;");
        code.AppendLine("using System.Collections.Generic;");
        code.AppendLine();
        code.AppendLine($"namespace {enumNamespace}");
        code.AppendLine("{");
        code.AppendLine($"    public static partial class {className}");
        code.AppendLine("    {");

        foreach (var rootItem in rootItems)
        {
            var childItems = lookupItems.Where(x => x.ParentId == rootItem.Id).ToList();
            
            // Generate enum
            code.AppendLine($"        public enum {SanitizeName(rootItem.Name)}");
            code.AppendLine("        {");
            for (int i = 0; i < childItems.Count; i++)
            {
                var child = childItems[i];
                code.AppendLine($"            {SanitizeName(child.Name)} = {child.Id}{(i < childItems.Count - 1 ? "," : "")}");
            }
            code.AppendLine("        }");
            code.AppendLine();

            // Generate const group
            if (childItems.Any())
            {
                code.AppendLine($"        public static class {SanitizeName(rootItem.Name)}Group");
                code.AppendLine("        {");
                foreach (var child in childItems)
                {
                    code.AppendLine($"            public const int {SanitizeName(child.Name)} = {child.Id};");
                }
                code.AppendLine("        }");
                code.AppendLine();
            }
        }

        code.AppendLine("    }");
        code.AppendLine("}");

        return code.ToString();
    }
    catch (Exception ex)
    {
        return $"// Error occurred during code generation: {ex.Message}";
    }
}

private List<LookupItem> GetLookupItems(string connectionString, string lookupTableName)
{
    var lookupItems = new List<LookupItem>();
    
    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        connection.Open();
        string query = $"SELECT Id, Name, ParentId FROM {lookupTableName} ORDER BY ParentId, Name";
        SqlCommand command = new SqlCommand(query, connection);
        SqlDataReader reader = command.ExecuteReader();
        
        while (reader.Read())
        {
            lookupItems.Add(new LookupItem
            {
                Id = reader.GetInt32(0),
                Name = reader.GetString(1),
                ParentId = reader.IsDBNull(2) ? (int?)null : reader.GetInt32(2)
            });
        }
    }
    
    return lookupItems;
}

internal class LookupItem
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int? ParentId { get; set; }
}

private string SanitizeName(string name)
{
    if (string.IsNullOrWhiteSpace(name))
        return "Unknown";
        
    // Remove invalid characters
    string sanitized = System.Text.RegularExpressions.Regex.Replace(name, @"[^a-zA-Z0-9_]", "");
    
    // Ensure it starts with a letter
    if (sanitized.Length > 0 && !char.IsLetter(sanitized[0]))
        sanitized = "E" + sanitized;
        
    return string.IsNullOrWhiteSpace(sanitized) ? "Unknown" : sanitized;
}
#>